@startuml 
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
LAYOUT_TOP_DOWN()
Person(user, "Usuário", "Pessoa controlando o consumo de energia")
System(system, "Plataforma de Controle de Energia", "Monitora e analisa consumo de energia elétrica")
System_Ext(mqttBroker, "Broker MQTT", "Gerencia comunicação IoT em tempo real")
System_Ext(aiModule, "Módulo de IA", "Analisa dados e gera recomendações")
System_Ext(database, "Banco de Séries Temporais", "Armazena leituras de consumo")
Rel(user, system, "Interage através de dashboards web")
Rel(system, mqttBroker, "Publica/Assina telemetria via MQTT")
Rel(system, aiModule, "Envia dados para análise e recebe recomendações")
Rel(system, database, "Lê e grava dados de consumo")
@enduml

--- Container Diagram PUML ---
@startuml container
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_LEFT_RIGHT()
Person(user, "Usuário")
System_Boundary(system, "Plataforma de Controle de Energia") {
    Container(webApp, "Frontend (Vue.js)", "JavaScript", "Dashboard interativo")
    Container(api, "API Backend (Go)", "Go", "Processa requisições REST e MQTT")
    ContainerDb(db, "Banco Relacional (PostgreSQL)", "SQL Database")
    ContainerDb(timeSeriesDb, "Banco de Séries Temporais (InfluxDB/TimescaleDB)", "Time Series DB")
    Container(mqttBroker, "Broker MQTT", "MQTT Broker")
    Container(aiModule, "Módulo IA (Python)", "Python", "Análise preditiva e recomendações")
}
Rel(user, webApp, "Usa interface web")
Rel(webApp, api, "Chama APIs REST")
Rel(api, db, "Lê/Grava dados de usuários e configurações")
Rel(api, timeSeriesDb, "Lê/Grava leituras de consumo")
Rel(api, mqttBroker, "Publica/Assina telemetria")
Rel(api, aiModule, "Envia dados para análise")
Rel(aiModule, api, "Devolve recomendações via API")
@enduml